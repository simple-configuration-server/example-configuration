# Simple CI/CD configuration that illustrates how to test the configuration
# data, and build a versioned scs docker image that includes your configuration
# data

# Stages are manually defined, to make sure the testing is done before building
# the image, and not vice-versa
stages:
  - test
  - build
  # In your own implementations, you can also add a deploy stage, to take
  # full advantage of GitLab CI/CD, and automatically deploy if tagged
  # - deploy

validate_configuration:
  stage: test
  image: registry.gitlab.com/tom-brouwer/simple-configuration-server:1.0.1
  script:
    # Validate git tag format
    - "echo $CI_COMMIT_TAG | grep -oE '^([0-9]+\\.){2}[0-9]+$' || (echo \"ERROR: Invalid tag format, should be a three part version number (e.g. 1.2.3)\" && exit 1)"
    # First check that the ci/cd image version is the same as the dockerfile
    - DOCKERFILE_IMAGE=$(cat Dockerfile | grep -oE 'simple-configuration-server:([0-9]+\.){2}[0-9]+')
    - CICDFILE_IMAGE=$(cat .gitlab-ci.yml | grep -oE 'simple-configuration-server:([0-9]+\.){2}[0-9]+')
    - 'if [ "$DOCKERFILE_IMAGE" != "$CICDFILE_IMAGE" ]; then echo "ERROR: Different scs versions used in .gitlab-cy.yml and Dockerfile" && exit 1; fi'
    # Then run the validation
    - rm -r /etc/scs/*
    - cp -r ./configuration/* /etc/scs
    - cd /app
    - python validate.py
  only:
    - tags
  timeout: 2 minutes

build_docker_image:
  stage: build
  image: docker:20
  services:
    - docker:20-dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - IMAGE_TAG="$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    - 'if docker pull $IMAGE_TAG > /dev/null 2>&1; then echo "ERROR: An image with the given tag already exists. Please increment the contents of the VERSION file" && exit 1; fi'
    - docker build . -t $IMAGE_TAG
    - docker push $IMAGE_TAG
  only:
    - tags
  timeout: 5 minutes
